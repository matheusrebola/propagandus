version: '3.8'

services:
  mysql-analitics:
    image: mysql:latest
    container_name: data-analitics
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: data-analitics2@
      MYSQL_DATABASE: data-analitics
      MYSQL_USER: propagandus
      MYSQL_PASSWORD: propagandus2@
    ports:
      - "53300:3306"
    volumes:
      - mysql_analitics:/var/lib/mysql/analitics
  mysql-backup:
    image: mysql:latest
    container_name: data-backup
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: data-backup2@
      MYSQL_DATABASE: data-backup
      MYSQL_USER: propagandus
      MYSQL_PASSWORD: propagandus2@
    ports:
      - "53301:3306"
    volumes:
      - mysql_backup:/var/lib/mysql/backup
  mongodb-distribution:
    image: mongo:latest
    container_name: data-distribution
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: data-distribution
      MONGO_INITDB_ROOT_PASSWORD: data-distribution
      MONGO_INITDB_DATABASE: data-distribution-db
    ports:
      - "57010:27017"
    volumes:
      - mongo_data:/data/db/data-distribution
    networks:
      - propagandus

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper-container
    restart: always
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "52181:2181"
    networks:
      - orchestrator-saga

  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    restart: always
    ports:
      - "59092:9092"
    networks:
      - orchestrator-saga
    environment:
      KAFKA_CFG_LISTENERS: "INTERNAL://:29092,EXTERNAL://0.0.0.0:9092"
      KAFKA_CFG_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-container:52181"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  redpanda-console:
    container_name: redpanda
    image: docker.redpanda.com/vectorized/console:latest
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    ports:
      - "58081:8080"
    networks:
      - orchestrator-saga
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:29092"]
    depends_on:
      - kafka

volumes:
  mysql_analitics:
  mysql_backup:
  mongo_data:

networks:
  propagandus:
    driver: bridge